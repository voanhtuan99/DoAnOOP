/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panel;

import Frame.FrAddNDT;
import Class.KetNoiSQL;
import Class.NhaDauTu;
import Frame.FrDetailNDT;
import static Frame.FrMain.ketNoi;
import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NHT
 */
public class PanelNDT extends javax.swing.JPanel {

    /**
     * Creates new form PanelNDT
     */
    private String maTK;

    public PanelNDT() {
        initComponents();
        layDataNDT();
    }
    
    public void layDataNDT() {

        DefaultTableModel dtm = (DefaultTableModel) jTableNDT.getModel();
        dtm.setNumRows(0);

        String sql = "select * from NhaDauTu";
        Vector vt;
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {

                vt = new Vector();
                vt.add(rs.getString("MaTK"));
                vt.add(rs.getString("Ho") + " " + rs.getString("Ten"));
                vt.add(rs.getString("NgaySinh"));
                vt.add(rs.getString("Phai"));
                vt.add(rs.getString("Email"));
                vt.add(rs.getString("SDT"));
                vt.add(rs.getString("CMND"));
                dtm.addRow(vt);
            }
            jTableNDT.setModel(dtm);
            rs.close();
            ps.close();
           
        } catch (SQLException ex) {
            Logger.getLogger(PanelNDT.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
      
    public void xoaNDT(String maTK) {
       
        String sql = "delete from NhaDauTu where MaTK = ?";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setString(1, maTK);
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(PanelNDT.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAdd = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonDetalis = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableNDT = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 0, 0));

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Edit");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        jButtonDel.setText("Delete");
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DANH SÁCH NHÀ ĐẦU TƯ");

        jButtonDetalis.setText("Details");
        jButtonDetalis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetalisActionPerformed(evt);
            }
        });

        jTableNDT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTableNDT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "MãTK", "Họ Tên", "NgàySinh", "Phái", "Email", "SDT","CMND/HộChiếu"
            }
        ));
        jTableNDT.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableNDT.setFocusable(false);
        jTableNDT.setGridColor(new java.awt.Color(153, 153, 153));
        jTableNDT.setIntercellSpacing(new java.awt.Dimension(0, 0));
        jTableNDT.setRowHeight(30);
        jTableNDT.setSelectionBackground(new java.awt.Color(255, 0, 51));
        jTableNDT.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTableNDT.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableNDT.setShowVerticalLines(false);
        jTableNDT.getTableHeader().setReorderingAllowed(false);
        jTableNDT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableNDTMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableNDT);
        jTableNDT.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 18));
        jTableNDT.getTableHeader().setOpaque(false);
        jTableNDT.getTableHeader().setBackground(Color.red);
        jTableNDT.getTableHeader().setForeground(new Color(0,0,0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(543, 543, 543)
                        .addComponent(jLabel1)
                        .addGap(0, 531, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1476, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDetalis)
                .addGap(569, 569, 569))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonEdit)
                    .addComponent(jButtonDel)
                    .addComponent(jButtonDetalis))
                .addGap(85, 85, 85))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTableNDTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableNDTMouseClicked
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTableNDT.getModel();
        maTK = dtm.getValueAt(jTableNDT.getSelectedRow(), 0).toString();
    }//GEN-LAST:event_jTableNDTMouseClicked

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        new FrAddNDT().setVisible(true);
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        // TODO add your handling code here:
        if (maTK == null) {
            JOptionPane.showMessageDialog(this, "Vui Lòng Chọn Nhà Đầu Tư");
            return;
        }
        NhaDauTu ndt = null;
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "select * from NhaDauTu where MaTK ='" + maTK + "'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                ndt = new NhaDauTu(rs.getString("MaTK"), rs.getString("Ho"), rs.getString("Ten"), rs.getDate("NgaySinh"), rs.getString("NoiSinh"), rs.getString("Phai"), rs.getString("DiaChi"), rs.getString("Email"), rs.getString("SDT"), rs.getString("CMND"), rs.getDate("NgayCap"), rs.getString("NoiCap"), rs.getString("TrNgNc"), rs.getString("MMGD"), rs.getString("MKDL"));
            }
            rs.close();
            ps.close();
            ketNoi.close();
        } catch (SQLException ex) {
            Logger.getLogger(PanelNDT.class.getName()).log(Level.SEVERE, null, ex);
        }

        new FrAddNDT(ndt).setVisible(true);
        layDataNDT();
    }//GEN-LAST:event_jButtonEditActionPerformed
    
    public int ktTKNH(String maTKNH)
    {
        int kt=0;
        String sql = "SELECT * FROM LenhDat WHERE MaTKNH ='"+maTKNH+"' AND (MaTrangThai='K1P' OR MaTrangThai='CK')";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs=ps.executeQuery();
            if(rs.next())
            {
                kt=1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(PanelTTCP.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(kt==1)
        {
            return kt;
        }
        sql = "SELECT *FROM (SELECT *FROM LenhKhop WHERE TrangThai=N'Chưa Chuyển') AS LK\n"
             + "INNER JOIN (SELECT *FROM LenhDat WHERE MaTKNH ='"+maTKNH+"') AS LD\n"
             + "ON LK.MaLenh = LD.MaLenh";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs=ps.executeQuery();
            if(rs.next())
            {
                kt=2;
            }
        } catch (SQLException ex) {
            Logger.getLogger(PanelNDT.class.getName()).log(Level.SEVERE, null, ex);
        }
        return kt;
    }
    
    public int ktNDT(String maTK)
    {
        int kt=0;
        String sql = "SELECT * FROM SoHuu WHERE MaTK ='"+maTK+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs=ps.executeQuery();
            if(rs.next())
            {
                kt=1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(PanelNDT.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(kt==1)
        {
            return kt;
        }
        
       ArrayList<String> a=new ArrayList<>();
        
       sql = "SELECT MaTKNH FROM TKNH WHERE MaTK ='"+maTK+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs=ps.executeQuery();
            while(rs.next())
            {
                a.add(rs.getString(1));
            }
            rs.close();
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(PanelNDT.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(a.isEmpty())
        {
            return 0;
        }
        else
        {
            return 2;
        }
        
//        for(String temp:a)
//        {
//           int kt1=ktTKNH(temp);
//           if(kt1 != 0)
//           {
//               return kt1+1 ;
//           }
//        }
//        return kt;
    }
    
    
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        // TODO add your handling code here:
        if (maTK == null) {
            JOptionPane.showMessageDialog(this, "Vui Lòng Chọn Nhà Đầu Tư");
            return;
        }
        int kt=ktNDT(maTK);
        if(kt==1)
        {
            JOptionPane.showMessageDialog(this, "Nhà Đầu Tư Này Đang Sở Hữu Cố Phiếu");
            return;
        }
         else if(kt==2)
        {
            JOptionPane.showMessageDialog(this, "Nhà Đầu Tư Này Đang Có TKNH");
            return;
        }
        else if(kt==3)
        {
            JOptionPane.showMessageDialog(this, "Nhà Đầu Tư Này Đang Đặt Lệnh");
            return;
        }
        else if(kt==4)
        {
            JOptionPane.showMessageDialog(this, "Nhà Đầu Tư Này Đang Chờ Cập Nhật Tiền Và Cổ Phiếu");
            return;
        }
        int ret = JOptionPane.showConfirmDialog(this, "Bạn Có Chắc Chắn Muốn Xoá?", "Xác Nhận", 0);
        if (ret == JOptionPane.CANCEL_OPTION) {

        } else if (ret == JOptionPane.OK_OPTION) {
            xoaNDT(maTK);
            JOptionPane.showMessageDialog(this, "Xóa sách thành công");
            layDataNDT();
            maTK = null;
        }
       
    }//GEN-LAST:event_jButtonDelActionPerformed

    private void jButtonDetalisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetalisActionPerformed
        // TODO add your handling code here:
        if(maTK==null)
        {
             JOptionPane.showMessageDialog(this, "Vui Lòng Chọn Nhà Đầu Tư");
             return;
        }
        new FrDetailNDT(maTK).setVisible(true);
    }//GEN-LAST:event_jButtonDetalisActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonDetalis;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableNDT;
    // End of variables declaration//GEN-END:variables
}
